{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "eblakem/phoenix"
license:             BSD-3-Clause
author:              "Michael Blake"
maintainer:          "eblakem@gmail.com"
copyright:           "2025 Michael Blake"

extra-source-files:
- README.md
- CHANGELOG.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- text
- bytestring
- servant
- servant-server
- servant-multipart
- wai
- warp
- http-types
- containers
- foreign-store
- sqlite-simple
- resource-pool
- hspec
- hspec-wai



ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wmissing-export-lists
- -Wmissing-home-modules
- -Wpartial-fields
- -Wredundant-constraints

default-extensions:
- OverloadedStrings
- ImportQualifiedPost 
- DeriveGeneric
- NamedFieldPuns
- TypeOperators
- DataKinds

library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}


{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE app/Main.hs #-}
module Main (main) where

import Lib 

main :: IO ()
main = runApp

{-# START_FILE src/Lib.hs #-}
module Lib
  ( runApp,
  )
where

import qualified Api 
import Control.Exception (bracket)
import qualified Network.Wai.Handler.Warp as Warp
import Servant.Server.Generic (genericServe)
import qualified Session

runApp :: IO ()
runApp = bracket initApp shutdownApp startApp

initApp :: IO Session.Session
initApp = do 
  session <- Session.mk "phoenix.db"
  return session

shutdownApp :: Session.Session -> IO ()
shutdownApp session' = 
  Session.destroy session'

startApp :: Session.Session -> IO ()
startApp session' = do 
  putStrLn $ "Running on port " <> (show port)
  Warp.run port $ genericServe $ Api.server session'
  where 
    port :: Int 
    port = 8081

{-# START_FILE src/Api.hs #-}
module Api (server) where

import Data.ByteString.Lazy qualified as BS
import GHC.Generics (Generic)
import Network.HTTP.Types (ok200)
import Network.Wai (responseLBS)
import Servant
import Servant.Server.Generic (AsServer)
import Session qualified

data Routes mode = Routes
  { publicRoutes :: mode :- Servant.NamedRoutes PublicRoutes
  }
  deriving (Generic)

data PublicRoutes mode = PublicRoutes
  { assets :: mode :- "assets" :> Servant.Raw,
    client :: mode :- Servant.Raw
  }
  deriving (Generic)

server :: Session.Session -> Routes AsServer
server _ =
  Routes
    { publicRoutes =
        PublicRoutes
          { assets = Servant.serveDirectoryWebApp "public/assets",
            client = return serveClient
          }
    }

serveClient :: Servant.Application
serveClient _ response = do
  contents <- BS.readFile "public/index.html"
  response $
    responseLBS ok200 [html] contents
  where
    html = ("Content-Type", "text/html; charset=UTF-8")

{-# START_FILE src/Session.hs #-}
module Session
  ( mk,
    withSql,
    destroy,
    Session,
  )
where

import Data.Pool qualified as Pool
import Database.SQLite.Simple as SQL

data Session = MkSession
  { _dbPool :: Pool.Pool SQL.Connection
  }

mk :: String -> IO Session
mk dbName' = do
  pool <- Pool.newPool $ Pool.defaultPoolConfig (SQL.open dbName') (SQL.close) 10 10
  return $
    MkSession
      { _dbPool = pool
      }

withSql :: (SQL.Connection -> IO a) -> Session -> IO a
withSql action (MkSession {_dbPool}) =
  Pool.withResource _dbPool action

destroy :: Session -> IO ()
destroy (MkSession {_dbPool}) =
  Pool.destroyAllResources _dbPool

{-# START_FILE src/DevelMain.hs #-}
module DevelMain (update, shutdown) where

import Control.Concurrent
    ( MVar
    , ThreadId
    , forkIO
    , killThread
    , newEmptyMVar
    , putMVar
    , takeMVar
    )
import Control.Exception (finally)
import Control.Monad ((>=>))
import Data.IORef
    ( IORef
    , newIORef
    , readIORef
    , writeIORef
    )
import Foreign.Store
    ( Store (..)
    , lookupStore
    , readStore
    , storeAction
    , withStore
    )
import GHC.Word (Word32)
import Lib (runApp)
import Prelude

-- | Start or restart the server.

-- newStore is from foreign-store.

-- A Store holds onto some data across ghci reloads

update :: IO ()
update = do
    mtidStore <- lookupStore tidStoreNum
    case mtidStore of
        -- no server running

        Nothing -> do
            done <- storeAction doneStore newEmptyMVar
            tid <- start done
            _ <- storeAction (Store tidStoreNum) (newIORef tid)
            return ()
        -- server is already running

        Just tidStore -> restartAppInNewThread tidStore
    where
        doneStore :: Store (MVar ())
        doneStore = Store 0

        -- shut the server down with killThread and wait for the done signal

        restartAppInNewThread :: Store (IORef ThreadId) -> IO ()
        restartAppInNewThread tidStore = modifyStoredIORef tidStore $ \tid -> do
            killThread tid
            withStore doneStore takeMVar
            readStore doneStore >>= start

        start
            -- \| Written to when the thread is killed.
            :: MVar () -> IO ThreadId
        start done =
            forkIO
                ( finally
                    runApp
                    -- Note that this implies concurrency

                    -- between shutdownApp and the next app that is starting.

                    -- Normally this should be fine

                    (putMVar done ())
                )

-- | kill the server
shutdown :: IO ()
shutdown = do
    mtidStore <- lookupStore tidStoreNum
    case mtidStore of
        -- no server running

        Nothing -> putStrLn "no app running"
        Just tidStore -> do
            withStore tidStore $ readIORef >=> killThread
            putStrLn "App is shutdown"

tidStoreNum :: Word32
tidStoreNum = 1

modifyStoredIORef :: Store (IORef a) -> (a -> IO a) -> IO ()
modifyStoredIORef store f = withStore store $ \ref -> do
    v <- readIORef ref
    f v >>= writeIORef ref

{-# START_FILE Makefile #-}
dev:
	ghcid --command="stack ghci" --test ":main" --warnings

{-# START_FILE .gitignore #-}
.stack-work/
*~

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE CHANGELOG.md #-}
# Changelog for `{{ name }}`

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to the
[Haskell Package Versioning Policy](https://pvp.haskell.org/).

## Unreleased

## 0.1.0.0 - YYYY-MM-DD

{-# START_FILE test/Spec.hs #-}
main :: IO ()
main = putStrLn "Test suite not yet implemented"
